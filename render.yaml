# render.yaml - Master Plan untuk Deploy Aplikasi Dear Diary di Render.com

services:
  # 1. Layanan Database PostgreSQL Terkelola
  # Render akan membuatkan database ini untuk kita.
  - type: pserv # "pserv" untuk layanan internal seperti database
    name: db # Nama ini akan menjadi hostname database kita
    runtime: postgres
    plan: free # Mulai dengan plan gratis, bisa di-upgrade nanti
    postgres:
      version: 15 # Versi PostgreSQL

  # 2. Layanan Redis Terkelola
  # Digunakan oleh Celery sebagai broker dan result backend.
  - type: pserv
    name: redis
    runtime: redis
    plan: free

  # 3. Layanan Web (Aplikasi FastAPI Anda)
  # Ini adalah layanan utama yang akan menerima trafik dari internet.
  - type: web
    name: web # Nama layanan
    runtime: docker # Kita memberitahu Render untuk membangun dari Dockerfile
    repo: https://github.com/tanerizawa/server # GANTI DENGAN URL REPO GITHUB ANDA
    autoDeploy: true # Deploy otomatis setiap kali ada push ke branch utama
    healthCheckPath: /docs # Render akan memeriksa path ini untuk memastikan aplikasi sehat
    envVars:
      # Variabel lingkungan akan diambil secara otomatis dari layanan lain
      - key: DATABASE_URL
        fromService:
          type: pserv
          name: db
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: pserv
          name: redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: pserv
          name: redis
          property: connectionString
      # Variabel lain akan kita masukkan sebagai Secret File
      - fromGroup: dear-diary-secrets

  # 4. Layanan Worker (Celery Background Task)
  # Ini berjalan di latar belakang dan tidak terekspos ke internet.
  - type: worker
    name: worker
    runtime: docker
    repo: https://github.com/tanerizawa/server # GANTI DENGAN URL REPO GITHUB ANDA
    autoDeploy: true
    # Perintah untuk menjalankan Celery worker
    dockerCommand: celery -A app.tasks.celery_app worker --loglevel=info
    envVars:
      # Worker juga membutuhkan koneksi ke DB dan Redis, sama seperti web
      - key: DATABASE_URL
        fromService:
          type: pserv
          name: db
          property: connectionString
      - key: CELERY_BROKER_URL
        fromService:
          type: pserv
          name: redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: pserv
          name: redis
          property: connectionString
      # Menggunakan grup secret yang sama dengan layanan web
      - fromGroup: dear-diary-secrets

# Grup Environment untuk menyimpan semua kunci rahasia kita di satu tempat
envVarGroups:
  - name: dear-diary-secrets
    # Kita akan mengisi variabel-variabel ini melalui dasbor Render
    # Ini adalah cara aman untuk mengelola secrets
    # Contoh: SECRET_KEY, OPENROUTER_API_KEY, dll.